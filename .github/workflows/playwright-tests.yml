name: 🎭 Playwright E2E Tests with Allure Report

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

# Permissions for GitHub Pages and PR comments
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

jobs:
  test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🎭 Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: 🔧 Setup Convex (if needed for tests)
        run: |
          # Add Convex setup here if tests require backend
          # npx convex dev --once
        continue-on-error: true

      - name: 🧪 Run Playwright tests
        run: npm run test:e2e
        continue-on-error: true

      - name: 📊 Generate Allure report
        if: always()
        run: |
          npm install -g allure-commandline
          allure generate allure-results --clean -o allure-report

      - name: 📤 Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results/
          retention-days: 30

      - name: 📤 Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30

      - name: 📤 Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 📝 Extract test results
        if: always()
        id: test-results
        run: |
          # Count test results from allure-results
          TOTAL=$(find allure-results -name "*-result.json" | wc -l)
          PASSED=$(grep -l '"status":"passed"' allure-results/*-result.json 2>/dev/null | wc -l)
          FAILED=$(grep -l '"status":"failed"' allure-results/*-result.json 2>/dev/null | wc -l)
          SKIPPED=$(grep -l '"status":"skipped"' allure-results/*-result.json 2>/dev/null | wc -l)

          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT

      - name: 💬 Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🎭 Playwright Test Results')
            );

            const output = `## 🎭 Playwright Test Results

            | Status | Count |
            |--------|-------|
            | ✅ Passed | ${{ steps.test-results.outputs.passed }} |
            | ❌ Failed | ${{ steps.test-results.outputs.failed }} |
            | ⏭️ Skipped | ${{ steps.test-results.outputs.skipped }} |
            | 📊 Total | ${{ steps.test-results.outputs.total }} |

            ### 📊 Allure Report
            The detailed Allure report will be available on GitHub Pages after merge to main.

            **Artifacts available:**
            - 📋 [Playwright Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - 📊 [Allure Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            _🤖 Automated by Playwright + Allure · [View workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})_
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }

  # Deploy Allure report to GitHub Pages (only on main branch)
  deploy-report:
    name: Deploy Allure Report to GitHub Pages
    needs: test
    if: github.ref == 'refs/heads/main' && always()
    runs-on: ubuntu-latest

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Download Allure report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: 📄 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 💬 Comment with report URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 📊 Allure Report Published!\n\n✅ View the detailed test report: ${{ steps.deployment.outputs.page_url }}\n\n_Report updated from main branch_`
            });